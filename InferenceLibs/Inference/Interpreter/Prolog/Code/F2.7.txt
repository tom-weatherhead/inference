% Prolog lists and sequences
% See http://www.csupomona.edu/~jrfisher/www/prolog_tutorial/2_7.html
% This is a Prolog2 program.
member(X,[X|_]).
member(X,[_|R]) :- member(X,R).
takeout(X,[X|R],R).
takeout(X,[F|R],[F|S]) :- takeout(X,R,S).
append([X|Y],Z,[X|W]) :- append(Y,Z,W).
append([],X,X).
reverse([X|Y],Z,W) :- reverse(Y,[X|Z],W).
reverse([],X,X).
reverse(A,R) :- reverse(A,[],R).
perm([X|Y],Z) :- perm(Y,W), takeout(X,Z,W).   
perm([],[]).
subset([X|R],S) :- member(X,S), subset(R,S).
subset([],_).
union([X|Y],Z,W) :- 
  member(X,Z), 
  !,        % do not use next clauses
  union(Y,Z,W). 
union([X|Y],Z,[X|W]) :- union(Y,Z,W).
union([],Z,Z).
intersection([X|Y],Z,[X|W]) :- 
  member(X,Z), 
  !,        % do not use next clauses
  intersection(Y,Z,W). 
intersection([X|Y],Z,W) :- intersection(Y,Z,W).
intersection([],Z,[]).
% Exercise 2.7.5 : delete(X,L,R) : List R is list L with all occurrences of X deleted.
delete(_,[],[]).
delete(X,[X|L],R) :- !, delete(X,L,R).
delete(X,[Y|L],[Y|R]) :- delete(X,L,R).
% Exercise 2.7.6 : prune(A,B) : Remove multiple occurrences of elements from A to produce result B.
prune([],[]).
prune([X|A],[X|B]) :- delete(X,A,C), prune(C,B).
% Exercise 2.7.7 : prefix(A,B), which is satisfied iff A is a list prefix of B.
prefix([],_).
prefix([X|A],[X|B]) :- prefix(A,B).
% Exercise 2.7.8 : segment(A,B), which is satisfied iff A is a contiguous segment contained within B.
segment(A,B) :- prefix(A,B).
segment(A,[_|B]) :- segment(A,B).
% Merge sort
split([],[],[]).
split([A],[A],[]).
split([A,B|R],[A|Ra],[B|Rb]) :-  split(R,Ra,Rb).
merge(A,[],A).
merge([],B,B).
merge([A|Ra],[B|Rb],[A|M]) :-  A <= B, merge(Ra,[B|Rb],M).
merge([A|Ra],[B|Rb],[B|M]) :-  A > B,  merge([A|Ra],Rb,M).
mergesort([],[]).    % Covers special case.
mergesort([A],[A]).
mergesort([A,B|R],S) :-  
   split([A,B|R],L1,L2),
   mergesort(L1,S1),
   mergesort(L2,S2),
   merge(S1,S2,S).
% Sequences
sequence_append((X,R),S,(X,T)) :-
      !, 
      sequence_append(R,S,T).
sequence_append((X),S,(X,S)).
% Exercise 2.7.11
sequence_reverse((X,R),S) :- !, sequence_reverse(R,T), sequence_append(T,X,S).
sequence_reverse((X),(X)).
% Exercise 2.7.12
% Is this set of clauses the minimal solution?
sequence_delete(X,(X,Y),Z) :- !, sequence_delete(X,Y,Z).
sequence_delete(X,(W,X),(W)) :- !.
sequence_delete(X,(W,X,Y),Z) :- !, sequence_delete(X,(W,Y),Z).
sequence_delete(X,(W,Y),(W,Z)) :- !, sequence_delete(X,Y,Z).
sequence_delete(_,(Y),(Y)).
sequence_prune((X,X),(X)) :- !.
sequence_prune((X,X,Y),Z) :- !, sequence_prune((X,Y),Z).
sequence_prune((X,Y),(X,Z)) :- !, sequence_delete(X,Y,W), sequence_prune(W,Z).
sequence_prune((X),(X)).
% Exercise 2.7.13
sequence_member(X,(X,_)) :- !.
sequence_member(X,(Y,S)) :- !, sequence_member(X,S).
sequence_member(X,(X)).
sequence_is_one_element((_,_)) :- !, fail.
sequence_is_one_element(_).
sequence_member2(X,(X,_)).
sequence_member2(X,(Y,S)) :- sequence_member2(X,S).
sequence_member2(X,(X)) :- sequence_is_one_element(X).
?- member(2,[1,2,3]).
all
?- member(X,[1,2,3]), print(X).
?- member([3,Y], [[1,a],[2,m],[3,z],[4,v],[3,p]]), print(Y).
?- member(X,[23,45,67,12,222,19,9,6]), Y is X * X, Y < 100, print(X, Y).
?- takeout(X,[1,2,3],L), print(X, L).
?- takeout(3,W,[a,b,c]), print(W).
first
?- append([1,2,3],[4,5],[1,2,3,4,5]).
?- append([1,2,3],[4,5],A), print(A).
?- append([1,2,3],W,[1,2,3,4,5]), print(W).
?- reverse([1,2,3],R), print(R).
all
?- perm([1,2,3],P), print(P).
first
?- subset([4,3],[2,3,5,4]).
?- union([1,2,3,4],[1,a,b,4],A), print(A).
?- intersection([1,2,3,4],[1,a,b,4],B), print(B).
?- delete(1,[1,2,1,3,2,1,4,1],R), print(R).
?- prune([a,1,b,2,a,3,a,4,b],B), print(B).
?- prefix([1,2,3],[1,2,3,4,5]).
?- prefix([1,2],[1,a,2,3]).
all
?- prefix(W,[1,2,3]), print(W).
first
?- segment([a,b,c],[1,c,a,b,c,3]).
?- segment([a,b],[c,a,c,b]).
?- mergesort([4,3,6,5,9,1,7],S), print(S).
?- sequence_reverse((1,2,3,4),R), print(R).
?- sequence_prune((a,1,b,2,a,3,a,4,b),B), print(B).
?- sequence_prune((a,a,a,a),B), print(B).
?- sequence_member(2,(1,2,3)).
?- sequence_member(3,(1,2,3)).
?- sequence_member(4,(1,2,3)).
all
?- sequence_member(X,(1,2,3)), print(X).
?- sequence_member2(X,(1,2,3)), print(X).
first