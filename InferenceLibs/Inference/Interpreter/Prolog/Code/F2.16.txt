% Search
% See http://www.csupomona.edu/~jrfisher/www/prolog_tutorial/2_16.html
% This is a Prolog2 program.
%
% The generic code:
%
member(X,[X|_]).
member(X,[_|R]) :- member(X,R).
%
reverse([X|Y],Z,W) :- reverse(Y,[X|Z],W).
reverse([],X,X).
reverse(A,R) :- reverse(A,[],R).
%
solve(P) :-
      start(Start),
      search(Start,[Start],Q),
      reverse(Q,P).
%
search(S,P,P) :- goal(S), !.         % /* done                  */
search(S,Visited,P) :-
%     write('Generating next state after: '), write(S), nl,
     next_state(S,Nxt),              % /* generate next state   */
%     write('Next state: '), write(Nxt), nl,
     safe_state(Nxt),                % /* check safety          */
%     write('Safe state: '), write(Nxt), nl,
     no_loop(Nxt,Visited),           % /* check for loop        */
%     write('No-loop state: '), write(Nxt), nl,
     search(Nxt,[Nxt|Visited],P).    % /* continue searching... */
%
no_loop(Nxt,Visited) :-
      \+ member(Nxt,Visited).
%
% The N-Queens-specific code:
%
length([], 0).
length([_|L], M) :- length(L, N), M is N + 1.
%
start([]).
goal(S) :- length(S,8).
%
next_state(S,[C|S]) :- member(C,[1,2,3,4,5,6,7,8]),
                       \+ member(C,S).
%
safe_state([C|S]) :- length(S,L),
                     Sum is C + L + 1, Diff is C - L - 1,
                     safe_state(S,Sum,Diff).
%
safe_state([],_,_) :- !. % This was preventing the program from succeeding.  My cut implementation was buggy, but is now fixed.
%safe_state([],_,_). ; This alternative clause was used when my cut implementation was buggy.
safe_state([F|R],Sm,Df) :- length(R,L),
                           X is F + L + 1,
                           X \= Sm,	% ("X cannot be unified with Sm")
                           Y is F - L - 1,
                           Y \= Df,
                           safe_state(R,Sm,Df).
%
?- solve(P), print(P).