% Map colouring redux
% See http://www.csupomona.edu/~jrfisher/www/prolog_tutorial/2_9.html
% This is a Prolog2 program.
member(X,[X|_]).
member(X,[_|L]) :- member(X,L).
adjacent(X,Y,Map) :- member([X,Y],Map) ; member([Y,X],Map).
find_regions([],R,R). 
find_regions([[X,Y]|S], R,A) :- 
     (member(X,R) ->  
        (member(Y,R) -> find_regions(S,R,A) : find_regions(S,[Y|R],A)) :
           (member(Y,R) -> find_regions(S,[X|R],A) : find_regions(S,[X,Y|R],A) ) ).
?- find_regions([[1,2],[1,3],[1,4],[1,5],[2,3],[2,4],[3,4],[4,5]],[],R), print(R).
color(Map,Colors,Coloring) :-
        find_regions(Map,[],Regions), 
        color_all(Regions,Colors,Coloring), 
        \+ conflict(Map,Coloring).
color_all([R|Rs],Colors,[[R,C]|A]) :- 
        member(C,Colors), 
        color_all(Rs,Colors,A). 
color_all([],_,[]). 
conflict(Map,Coloring) :- 
        member([R1,C],Coloring), 
        member([R2,C],Coloring), 
        adjacent(R1,R2,Map).
?- adjacent(1,5,[[1,2],[1,3],[1,4],[1,5],[2,3],[2,4],[3,4],[4,5]]).
?- adjacent(2,5,[[1,2],[1,3],[1,4],[1,5],[2,3],[2,4],[3,4],[4,5]]).
?- conflict([[1,2],[1,3],[2,3]],[[1,red],[2,green],[3,blue]]).
?- conflict([[1,2],[1,3],[2,3]],[[1,red],[2,green],[3,green]]).
?- color([[1,2],[1,3],[1,4],[1,5],[2,3],[2,4],[3,4],[4,5]], 
                  [red,green,blue,yellow],Coloring), print(Coloring).